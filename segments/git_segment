#!/usr/bin/env bash

# git_segment

# shellcheck disable=SC2154
PL_OPTIONS[git_symbol_branch]=${PL_OPTIONS[git_symbol_branch]:-' '}
PL_OPTIONS[git_symbol_unmerged]=${PL_OPTIONS[git_symbol_unmerged]:-'x'}
PL_OPTIONS[git_symbol_staged]=${PL_OPTIONS[git_symbol_staged]:-'•'}
PL_OPTIONS[git_symbol_modified]=${PL_OPTIONS[git_symbol_modified]:-'~'}
PL_OPTIONS[git_symbol_added]=${PL_OPTIONS[git_symbol_added]:-'+'}
PL_OPTIONS[git_symbol_deleted]=${PL_OPTIONS[git_symbol_deleted]:-'-'}
PL_OPTIONS[git_symbol_untracked]=${PL_OPTIONS[git_symbol_untracked]:-'?'}
PL_OPTIONS[git_symbol_ahead]=${PL_OPTIONS[git_symbol_ahead]:-'↑'}
PL_OPTIONS[git_symbol_behind]=${PL_OPTIONS[git_symbol_behind]:-'↓'}
PL_OPTIONS[git_symbol_stashed]=${PL_OPTIONS[git_symbol_stashed]:-'§'}
PL_OPTIONS[git_show_status]=${PL_OPTIONS[git_show_status]:-true}

# -----------------------------------------------------------------------------
# segment content: git branch with indictors for status
# option variables;
#   PL_GIT_SHOW_STATUS
# shellcheck disable=SC2034
function _git_segment {
    local -n _content="${1:-}"
    local -n _hilite="${2:-false}"

    command -v git &> /dev/null  || return # exit early if no git

    local branch
    branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    [[ -z ${branch}  ]] && return;  # return early if not a git branch

    _content="${PL_OPTIONS[git_branch]}${branch}"

    if ${PL_OPTIONS[git_show_status]}; then
        local added=0
        local modified=0
        local staged=0
        local deleted=0
        local untracked=0
        local unmerged=0
        local stashed=0
        local ahead=0
        local behind=0

        # Read through git status porcelain
        local state tracking
        while IFS= read -r line; do # clear IFS to retain trailing whitespace
            state=${line:0:2}
            case ${state} in
                \#\#)           # branch line contains ahead/behind info
                    tracking=${line#*[}; tracking=${tracking%]*}
                    [[ ${tracking} =~ (behind )([^,]*) ]] &&
                        behind=${BASH_REMATCH[0]/behind /}
                    [[ ${tracking} =~ (ahead )([^,]*) ]] &&
                        ahead=${BASH_REMATCH[0]/ahead /}
                    ;;
                \?\?)           # untracked
                    untracked=$((untracked+1))
                    ;;
                ?A)             # added but not staged
                    added=$((added+1))
                    ;;&
                ?D)             # deleted
                    deleted=$((deleted+1))
                    ;;&
                U?|?U)              # (U)pdated/unmerged states
                    unmerged=$((unmerged+1))
                    ;;&
                ?M|?R|?C)       # modified/renamed/copied but not staged
                    modified=$((modified+1))
                    ;;&
                M?|A?|D?|R?|C?) # changes staged to be commited
                    staged=$((staged+1))
            esac
        done <<< "$(git status -b --porcelain 2> /dev/null)"

        while read -r line; do
            [[ -n ${line} ]] && stashed=$((stashed+1));
        done <<< "$(git stash list 2> /dev/null)"

        [[ $((added+modified+deleted+untracked+staged+unmerged)) -ne 0 ]] &&
            _hilite=true

        [[ ${unmerged} -ne 0 ]] &&
            _content="${PL_OPTIONS[git_symbol_unmerged]}${unmerged} ${_content}"
        [[ ${staged} -ne 0 ]] &&
            _content="${PL_OPTIONS[git_symbol_staged]}${staged} ${_content}"
        [[ ${modified} -ne 0 ]] &&
            _content="${PL_OPTIONS[git_symbol_modified]}${modified} ${_content}"
        [[ ${added} -ne 0 ]] &&
            _content="${PL_OPTIONS[git_symbol_added]}${added} ${_content}"
        [[ ${deleted} -ne 0 ]] &&
            _content="${PL_OPTIONS[git_symbol_deleted]}${deleted} ${_content}"
        [[ ${untracked} -ne 0 ]] &&
            _content="${PL_OPTIONS[git_symbol_untracked]}${untracked} ${_content}"

        [[ ${ahead} -ne 0 ]] &&
            _content+=" ${PL_OPTIONS[git_symbol_ahead]}${ahead}"
        [[ ${behind} -ne 0 ]] &&
            _content+=" ${PL_OPTIONS[git_symbol_behind]}${behind}"
        [[ ${stashed} -ne 0 ]] &&
            _content+=" ${PL_OPTIONS[git_symbol_stashed]}${stashed}"
    fi
}

